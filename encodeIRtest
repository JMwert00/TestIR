<!DOCTYPE html>
<html lang="en">
<head>
  <style>
    body {
      margin: auto;
      position: relative;
    }

    svg {
      display: block;
      position: relative;
      top: 0%;
      left: 0%;
      width: 25%;
      height: 25%;
      align-self: right;
      cursor: pointer;
    }

    .toggle {
      width: 100%;
    }
  </style>
</head>

<body>
  <svg viewBox="0 0 24 24">
    <path fill="#000000"
      d="M12,2A7,7 0 0,0 5,9C5,11.38 6.19,13.47 8,14.74V17A1,1 0 0,0 9,18H15A1,1 0 0,0 16,17V14.74C17.81,13.47 19,11.38 19,9A7,7 0 0,0 12,2M9,21A1,1 0 0,0 10,22H14A1,1 0 0,0 15,21V20H9V21Z" />
  </svg>

  <div id="toggle-container">
    <select id="select1" class="toggle">
      <option>...</option>
      <option value="benq">benq</option>
      <!-- Add other protocol options here -->
    </select>
  </div>
<!-- Update the function-options div to contain buttons -->
<div id="function-options"></div>
<button onclick="getOption()"> Check option</button>
<script type="text/javascript">
  var result2;
  function getOption(output) {
      selectElement = document.querySelector('#select1');
      output = selectElement.value;
      document.querySelector('.output').textContent = output;
      console.log(output);
      return output;
  }
</script>
<p> The value of the option selected is:
  <span class="output"></span>
</p>
  <script src="https://www.puck-js.com/puck.js"></script>
  <script type="module">
    async function loadCSVFile() {
      const response = await fetch('48,-1.csv');
      const csvData = await response.text();
      return csvData;
    }

    async function populateFunctions() {
  const selectedProtocol = document.getElementById('toggle').value;
  const functionOptions = document.getElementById('function-options');

  // Clear previous options
  functionOptions.innerHTML = '';

  try {
    // Fetch and parse CSV data
    const csvData = await loadCSVFile();
    console.log('Fetched CSV data:', csvData);

    const csvRows = csvData.split('\n').slice(1); // Exclude header

    for (const row of csvRows) {
      const [functionName, protocol, n1, n2, n3] = row.split(',');
      if (protocol === selectedProtocol) {
        const button = document.createElement('button');
        button.className = 'function-btn';
        button.textContent = functionName;

        // Set data attributes for protocol, n1, n2, n3
        button.dataset.protocol = protocol;
        button.dataset.n1 = n1;
        button.dataset.n2 = n2;
        button.dataset.n3 = n3;

        button.addEventListener('click', function () {
          // Retrieve protocol, n1, n2, n3 values from the clicked button
          const clickedProtocol = this.dataset.protocol;
          const clickedN1 = parseInt(this.dataset.n1);
          const clickedN2 = parseInt(this.dataset.n2);
          const clickedN3 = parseInt(this.dataset.n3);

          // Use the values as needed (e.g., call the encode function)
          console.log(clickedProtocol, clickedN1, clickedN2, clickedN3);
        });

        functionOptions.appendChild(button);
      }
    }
  } catch (error) {
    console.error('Error fetching or parsing CSV data:', error);
  }
}


  


  </script>
  <!--
    Encode Section
    Fix HighertoLowerCase 
  -->
  <script type="module" src="EncodeIR.js"></script>
  <script type="module">
        var path = document.getElementsByTagName('path')[0];
    path.style = "cursor:pointer;fill:#BBB";
    var state = 0;
    var states = [
      { color: "#444", command: "digitalWrite([LED3,LED2,LED1],0);\n" },
      { color : "red", command : "digitalWrite([LED3,LED2,LED1],1);\n" },
      { color: "green", command: "digitalWrite([LED3,LED2,LED1],2);\n" },
    ];

    // Now send commands to turn the LED on or off
    path.addEventListener("click", function () {
      state++;
      if (state >= states.length)
        state = 0;
      path.style.fill = states[state].color;
      Puck.write(states[state].command);
      return state;
    });
    import { EncodeIR } from "./EncodeIR.js";

    let protocolNames = ["DAC4", "Dell", "Denon-K", "Dgtec", "DishPlayer_Network", "Dreambox", "Furby", "GI4dtv", "GI_cable", "Jerrold", "Kaseikyo", "Kramer", "Mitsubishi", "NECx1", "NECx2", "Nokia32", "Nokia32single", "Polycom", "Proton", "Samsung20", "Samsung36", "TViX", "Teac-K", "Thomson", "Tivo-Nec1", "XMP", "aiwa", "async", "blaupunkt", "denon", "emerson", "f12", "fujitsu", "iPod", "imonpc", "jvc", "jvc_two_frames", "lumagen", "mce", "nec1", "nec2", "panasonic", "panasonic2", "pioneer", "pioneer2", "rc5", "rc5odd", "rc5x", "rc6-M-L", "rc6", "rca", "recs80_45", "recs80_68", "russound", "sagem", "sharp", "streamzap", "x10ir"];
    let protocolNamesLower = protocolNames.map(name => name.toLocaleLowerCase());

    async function encode(protocol, n1, n2, n3) {
      protocol = protocol.toLocaleLowerCase();
      let index = protocolNamesLower.indexOf(protocol);
      return EncodeIR(protocolNames[index], n1, n2, n3);
    }

    // Funktion run() definieren
    async function run() {
      //let result= await encode(protocolNames[index], n1, n2, n3);
      
      let result = await encode("NEC1", 48,-1,24);
      console.log(result);
    }
    var result2= getOption();
console.log(result2);
    path.addEventListener("click", function () {
      var currentValue=getOption();
  if (currentValue === 'benq') {
    run(); 
    console.log(result2);
  }
});
  </script>
</body>
</html>
